#
# GitHub Action workflow to run Terragrunt Format, Init, Validate, Plan then PR Comment
#
name: Terragrunt - Format, Init, Validate, Plan then PR Comment

on:
  workflow_call:
    inputs:
      # ENVIRONMENT:
      #   required: true
      #   type: string
      PROJECT_NAME:
        required: true
        type: string
      WORKING_DIR:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      TERRAFORM_VERSION:
        required: false
        type: string
        default: 1.2.6
      TERRAGRUNT_VERSION:
        required: false
        type: string
        default: 0.38.6
      TERRAFORM_WRAPPER:
        required: false
        type: string
        default: false
  
    secrets:
      # BACKEND_BUCKET:
      #   required: true
      # BACKEND_DYNAMODB_TABLE:
      #   required: true
      # DEPLOY_ROLE_ARN:
      #   required: true
      # BACKEND_ROLE_ARN:
      #   required: true 
      # MODULES_SSH_KEY:
      #   required: false
      DATABRICKS_ACCOUNT_HOST:
        required: true  
      DATABRICKS_ACCOUNT_ID:
        required: true 
      DATABRICKS_ACCOUNT_USERNAME:
        required: true 
      DATABRICKS_ACCOUNT_PASSWORD:
        required: true 



env:
  REPOSITORY_NAME: ${{ github.repository }}
  PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
  AWS_REGION: ${{ inputs.AWS_REGION }}


permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read
  pull-requests: write   # This is required for actions/checkout

jobs:
  terragrunt:
    name: Terragrunt Format, Init, Validate, Plan then PR Comment
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      TG_PLAN: ${{ steps.plan.outputs.TG_PLAN }}
    environment: ${{ inputs.ENVIRONMENT }}
    env:
      # BACKEND_BUCKET: ${{ secrets.BACKEND_BUCKET }}
      # BACKEND_BUCKET_REGION: ${{ secrets.BACKEND_BUCKET_REGION }}
      # BACKEND_DYNAMODB_TABLE: ${{ secrets.BACKEND_DYNAMODB_TABLE }}
      # DEPLOY_ROLE_ARN: ${{ secrets.DEPLOY_ROLE_ARN }}
      # BACKEND_ROLE_ARN: ${{secrets.BACKEND_ROLE_ARN}}
      DATABRICKS_ACCOUNT_HOST: ${{ secrets.DATABRICKS_ACCOUNT_HOST }}
      DATABRICKS_ACCOUNT_ID: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
      DATABRICKS_ACCOUNT_USERNAME: ${{ secrets.DATABRICKS_ACCOUNT_USERNAME }}
      DATABRICKS_ACCOUNT_PASSWORD: ${{ secrets.DATABRICKS_ACCOUNT_PASSWORD }}
      WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
      WORKSPACE_URL: ${{ secrets.WORKSPACE_URL }}
    steps:
      - name: Set Branch Name
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

    #   - name: Checkout
    #     uses: actions/checkout@v2.3.4
    #     with:
    #       fetch-depth: '0'

    #   - name: Configure AWS Credentials
    #     uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #       aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    #       # role-to-assume: ${{ secrets.DEPLOY_ROLE_ARN }}
    #       # aws-region: ${{ inputs.AWS_REGION }}

    #   # - name: Setup Git
    #   #   uses: webfactory/ssh-agent@v0.5.4
    #   #   with:
    #   #     # ssh-private-key: ${{ secrets.GITHUB_TOKEN }} 
    #   #     ssh-private-key: ${{ secrets.MODULES_SSH_KEY }}

    #   name: Set up Docker Buildx
    #     uses: docker/setup-buildx-action@v2

    #   - name: Build and push
    #     id: docker_build
    #     uses: docker/build-push-action@v3
    #     env:
    #       DATABRICKS_ACCOUNT_HOST: ${{ secrets.DATABRICKS_ACCOUNT_HOST }}
    #       DATABRICKS_ACCOUNT_ID: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
    #       DATABRICKS_ACCOUNT_USERNAME: ${{ secrets.DATABRICKS_ACCOUNT_USERNAME }}
    #       DATABRICKS_ACCOUNT_PASSWORD: ${{ secrets.DATABRICKS_ACCOUNT_PASSWORD }}
    #       WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
    #       WORKSPACE_URL: ${{ secrets.WORKSPACE_URL }}

    #     with:
    #       context: .
    #       file: dockerfiles/Dockerfile ## DockerFile Location.
    #       push: true
    #       tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.sha }}
    #       registry: ${{ steps.login-ecr.outputs.registry }}
    #       repository: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}
    #       add_git_labels: true
    #       tag_with_ref: true
    #       secrets: |
    #         "DATABRICKS_ACCOUNT_HOST=${{ secrets.DATABRICKS_ACCOUNT_HOST }}"
    #         "DATABRICKS_ACCOUNT_ID=${{ secrets.DATABRICKS_ACCOUNT_ID }}"
    #         "DATABRICKS_ACCOUNT_USERNAME=${{ secrets.DATABRICKS_ACCOUNT_USERNAME }}"
    #         "DATABRICKS_ACCOUNT_PASSWORD=${{ secrets.DATABRICKS_ACCOUNT_PASSWORD }}"
    #         "WORKSPACE_TOKEN=${{ secrets.WORKSPACE_TOKEN }}"
    #         "WORKSPACE_URL=${{ secrets.WORKSPACE_URL }} "
    #         "TERRAGRUNT_DIR=${{inputs.WORKING_DIR}}"

      # - name: Run fmt
      #   id: fmt
      #   run: |
      #     echo "WORKING_DIR=${{ inputs.WORKING_DIR }}" >> $GITHUB_OUTPUT
      #     terragrunt hclfmt --terragrunt-check -no-color
      #   working-directory: ${{ inputs.WORKING_DIR }}

      # - name: Run init
      #   id: init
      #   run: |
      #     terragrunt run-all init -no-color --terragrunt-non-interactive --terragrunt-fetch-dependency-output-from-state --terragrunt-working-dir $GITHUB_WORKSPACE/${{ inputs.WORKING_DIR }}
      #   working-directory: ${{ inputs.WORKING_DIR }}

      # - name: Run validate
      #   id: validate
      #   run: |
      #     terragrunt run-all validate -no-color --terragrunt-non-interactive --terragrunt-fetch-dependency-output-from-state --terragrunt-working-dir $GITHUB_WORKSPACE/${{ inputs.WORKING_DIR }}
      #   working-directory: ${{ inputs.WORKING_DIR }}

      # - name: Run Plan
      #   id: plan
      #   run: |
      #     terragrunt run-all plan -out terragrunt.plan -no-color --terragrunt-non-interactive --terragrunt-fetch-dependency-output-from-state --terragrunt-working-dir $GITHUB_WORKSPACE/${{ inputs.WORKING_DIR }}
      #     # export TG_PLAN=$(terragrunt run-all show -json plan.json)
      #     # echo "TG_PLAN: $TG_PLAN"
      #     # echo "TG_PLAN=$TG_PLAN" >> $GITHUB_ENV
      #     # echo $TG_PLAN
      #   working-directory: ${{ inputs.WORKING_DIR }}
      #   continue-on-error: true

      # - name: Check plan status
      #   if: steps.plan.outcome == 'failure'
      #   run: |
      #     echo "Outcome: ${{ steps.plan.outcome }}""
      #     exit 1
      #   working-directory: ${{ inputs.WORKING_DIR }}

      # - name: Create Comment with Terraform Plan Output
      #   uses: actions/github-script@v6.3.0
      #   if: ${{ github.event_name == 'pull_request' && steps.plan.outcome == 'success' }}
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       #### Working Dir \`${{ inputs.WORKING_DIR }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })